/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.video.v1;

import com.twilio.base.Creator;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import java.net.URI;
import java.util.List;

/**
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 */
public class CompositionCreator extends Creator<Composition> {
    private List<String> audioSources;
    private List<String> videoSources;
    private Composition.VideoLayout videoLayout;
    private String resolution;
    private Composition.Format format;
    private Integer desiredBitrate;
    private Integer desiredMaxDuration;
    private URI statusCallback;
    private HttpMethod statusCallbackMethod;
    private Boolean trim;
    private Boolean reuse;

    /**
     * The audio_sources.
     * 
     * @param audioSources The audio_sources
     * @return this
     */
    public CompositionCreator setAudioSources(final List<String> audioSources) {
        this.audioSources = audioSources;
        return this;
    }

    /**
     * The audio_sources.
     * 
     * @param audioSources The audio_sources
     * @return this
     */
    public CompositionCreator setAudioSources(final String audioSources) {
        return setAudioSources(Promoter.listOfOne(audioSources));
    }

    /**
     * The video_sources.
     * 
     * @param videoSources The video_sources
     * @return this
     */
    public CompositionCreator setVideoSources(final List<String> videoSources) {
        this.videoSources = videoSources;
        return this;
    }

    /**
     * The video_sources.
     * 
     * @param videoSources The video_sources
     * @return this
     */
    public CompositionCreator setVideoSources(final String videoSources) {
        return setVideoSources(Promoter.listOfOne(videoSources));
    }

    /**
     * The video_layout.
     * 
     * @param videoLayout The video_layout
     * @return this
     */
    public CompositionCreator setVideoLayout(final Composition.VideoLayout videoLayout) {
        this.videoLayout = videoLayout;
        return this;
    }

    /**
     * The resolution.
     * 
     * @param resolution The resolution
     * @return this
     */
    public CompositionCreator setResolution(final String resolution) {
        this.resolution = resolution;
        return this;
    }

    /**
     * The format.
     * 
     * @param format The format
     * @return this
     */
    public CompositionCreator setFormat(final Composition.Format format) {
        this.format = format;
        return this;
    }

    /**
     * The desired_bitrate.
     * 
     * @param desiredBitrate The desired_bitrate
     * @return this
     */
    public CompositionCreator setDesiredBitrate(final Integer desiredBitrate) {
        this.desiredBitrate = desiredBitrate;
        return this;
    }

    /**
     * The desired_max_duration.
     * 
     * @param desiredMaxDuration The desired_max_duration
     * @return this
     */
    public CompositionCreator setDesiredMaxDuration(final Integer desiredMaxDuration) {
        this.desiredMaxDuration = desiredMaxDuration;
        return this;
    }

    /**
     * The status_callback.
     * 
     * @param statusCallback The status_callback
     * @return this
     */
    public CompositionCreator setStatusCallback(final URI statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }

    /**
     * The status_callback.
     * 
     * @param statusCallback The status_callback
     * @return this
     */
    public CompositionCreator setStatusCallback(final String statusCallback) {
        return setStatusCallback(Promoter.uriFromString(statusCallback));
    }

    /**
     * The status_callback_method.
     * 
     * @param statusCallbackMethod The status_callback_method
     * @return this
     */
    public CompositionCreator setStatusCallbackMethod(final HttpMethod statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }

    /**
     * The trim.
     * 
     * @param trim The trim
     * @return this
     */
    public CompositionCreator setTrim(final Boolean trim) {
        this.trim = trim;
        return this;
    }

    /**
     * The reuse.
     * 
     * @param reuse The reuse
     * @return this
     */
    public CompositionCreator setReuse(final Boolean reuse) {
        this.reuse = reuse;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the create.
     * 
     * @param client TwilioRestClient with which to make the request
     * @return Created Composition
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Composition create(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.POST,
            Domains.VIDEO.toString(),
            "/v1/Compositions",
            client.getRegion()
        );

        addPostParams(request);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("Composition creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }

        return Composition.fromJson(response.getStream(), client.getObjectMapper());
    }

    /**
     * Add the requested post parameters to the Request.
     * 
     * @param request Request to add post params to
     */
    private void addPostParams(final Request request) {
        if (audioSources != null) {
            for (String prop : audioSources) {
                request.addPostParam("AudioSources", prop);
            }
        }

        if (videoSources != null) {
            for (String prop : videoSources) {
                request.addPostParam("VideoSources", prop);
            }
        }

        if (videoLayout != null) {
            request.addPostParam("VideoLayout", videoLayout.toString());
        }

        if (resolution != null) {
            request.addPostParam("Resolution", resolution);
        }

        if (format != null) {
            request.addPostParam("Format", format.toString());
        }

        if (desiredBitrate != null) {
            request.addPostParam("DesiredBitrate", desiredBitrate.toString());
        }

        if (desiredMaxDuration != null) {
            request.addPostParam("DesiredMaxDuration", desiredMaxDuration.toString());
        }

        if (statusCallback != null) {
            request.addPostParam("StatusCallback", statusCallback.toString());
        }

        if (statusCallbackMethod != null) {
            request.addPostParam("StatusCallbackMethod", statusCallbackMethod.toString());
        }

        if (trim != null) {
            request.addPostParam("Trim", trim.toString());
        }

        if (reuse != null) {
            request.addPostParam("Reuse", reuse.toString());
        }
    }
}